<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:UPDS">
    <!--窗口资源-->
    <!--故事版-->
    <Storyboard x:Key="Storyboard1" BeginTime="0:0:0">
        <!--控制窗体透明度-->
        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" From="0" To="1" Duration="0:0:2" Storyboard.TargetName="dp"/>
        <!--控制窗体放大和缩小-->
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX" From="0" To="1" Duration="0:0:2" Storyboard.TargetName="dp"/>
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY" From="0" To="1" Duration="0:0:2" Storyboard.TargetName="dp"/>
        <!--设置RotateTransform(旋转变化):属性Angle（旋转角度）从50到0历时2秒-->
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[1].Angle" From="0" To="360" Duration="0:0:2" SpeedRatio="2" Storyboard.TargetName="dp"/>
    </Storyboard>

    <Style x:Key="LoginButton" TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Cursor="Hand">
                        <Border x:Name="_Border" Background="{TemplateBinding Background}" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        </Border>
                        <!--ContentPresenter的作用就是显示内容，但Control类没有这个Content属性，所以在Control类之上写了一个ContentControl类，然后ContentPresenter(其显示依赖于ContentControl类)负责将ContentControl的Content属性显示出来。每个控件都有一个默认的ContentPresenter用于显示Content内容，这种控件为内容控件-->
                        <!--SnapsToDevicePixels获取或设置一个值，该值确定在呈现过程中，此元素的呈现是否应使用特定于设备的像素设置。 这是依赖项属性。-->
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <!--定义触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="_Border">
                                <Setter.Value>
                                    <SolidColorBrush Color="#ef3c62"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="_Border">
                                <Setter.Value>
                                    <SolidColorBrush Color="Gray"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <!--定义触发器_End-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--登录窗体阴影效果和旋转缩放动画。-->
    <Style x:Key="window_Shadow" TargetType="{x:Type Window}">
        <!--对象中心点用来定义所有RenderTransform变换中相对位置的的参考点,默认为图形的左上即(0,0),
                该属性值为相对值,介于 0 和 1 之间的值被解释为每对 x，y 轴中的当前元素的范围的因素-->
        <!--<Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Margin="10">
                        <!--x:Static 引用中定义的任何静态的值的代码实体公共语言规范 (CLS)– 合规的方式。 引用的静态属性可以用于提供在 XAML 中属性的值
                              SystemColors 定义的所需的静态成员的类型的名称。
                              WindowBrushKey 使用WindowBrushKey创建对用于绘制窗口的客户端区域背景的画笔的动态引用。 如果更改画笔，将自动更新此动态引用。 若要创建的静态引用，不会自动更新，请使用WindowBrush。-->
                        <Rectangle Name="rt" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                            <Rectangle.Effect>
                                <!--DropShadowEffect是WPF中一个阴影效果的类
                                        BlurRadius模糊半径属性，获取或设置阴影边缘的定义(阴影有多模糊)
                                        ShadowDepth属性设置投影距纹理下方的距离-->
                                <DropShadowEffect BlurRadius="12" ShadowDepth="0"/>
                            </Rectangle.Effect>
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <!--ScaleTransform：能够让某对象产生缩放变化。-->
                                    <ScaleTransform CenterX="240" CenterY="140"/>
                                    <!--RotateTransform：能够让某对象产生旋转变化，根据中心点进行顺时针旋转或逆时针旋转。-->
                                    <RotateTransform CenterX="240" CenterY="140"/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                        <!--SnapsToDevicePixels获取或设置一个值，该值确定在呈现过程中，此元素的呈现是否应使用特定于设备的像素设置。 这是依赖项属性。-->
                        <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Margin}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    CornerRadius="5">
                            <ContentPresenter />
                        </Border>
                    </Grid>
                    <!--定义触发器-->
                    <ControlTemplate.Triggers>
                        <!--属性触发器： 鼠标移入移出-->
                        <EventTrigger RoutedEvent="Window.Loaded">
                            <BeginStoryboard>
                                <Storyboard BeginTime="0:0:0">
                                    <!--控制窗体透明度-->
                                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" To="1" Duration="0:0:2"/>
                                    <!--控制窗体放大和缩小-->
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX" From="0" To="1" Duration="0:0:2" Storyboard.TargetName="rt"/>
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY" From="0" To="1" Duration="0:0:2" Storyboard.TargetName="rt"/>
                                    <!--设置RotateTransform(旋转变化):属性Angle（旋转角度）从0到0历时360秒-->
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[1].Angle" From="0" To="360" Duration="0:0:2" SpeedRatio="2" Storyboard.TargetName="rt"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                    <!--定义触发器_End-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--自定义button控件-->

</ResourceDictionary>